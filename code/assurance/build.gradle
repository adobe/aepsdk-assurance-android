/**
 * Copyright 2022 Adobe. All rights reserved.
 * This file is licensed to you under the Apache License, Version 2.0 (the "License");
 * you may not use this file except in compliance with the License. You may obtain a copy
 * of the License at http://www.apache.org/licenses/LICENSE-2.0
 * Unless required by applicable law or agreed to in writing, software distributed under
 * the License is distributed on an "AS IS" BASIS, WITHOUT WARRANTIES OR REPRESENTATIONS
 * OF ANY KIND, either express or implied. See the License for the specific language
 * governing permissions and limitations under the License.
 */

plugins {
    id 'com.android.library'
    id 'jacoco'
    id 'maven-publish'
    id 'signing'
    id 'com.diffplug.spotless'
}

// Apply local gradle tasks
apply from: '../codeformat.gradle'

jacoco {
    toolVersion = rootProject.ext.jacocoVersion
}

if (project.hasProperty("signKeyLoc") && project.hasProperty("signKeyId") && project.hasProperty("signPass")) {
    ext["signing.secretKeyRingFile"] = "$signKeyLoc"
    ext["signing.keyId"] = "$signKeyId"
    ext["signing.password"] = "$signPass"
}

if (project.hasProperty("sonatypeUser") && project.hasProperty("sonatypePass")) {
    ext["ossrhUsername"] = "$sonatypeUser"
    ext["ossrhPassword"] = "$sonatypePass"
} else {
    ext["ossrhUsername"] = ""
    ext["ossrhPassword"] = ""
}

android {
    compileSdkVersion rootProject.ext.compileSdkVersion

    defaultConfig {
        minSdkVersion rootProject.ext.minSdkVersion
        targetSdkVersion rootProject.ext.targetSdkVersion

        buildConfigField("String","EXTENSION_VERSION","\"${rootProject.moduleVersion}\"")
        testInstrumentationRunner 'androidx.test.runner.AndroidJUnitRunner'

    }

    flavorDimensions "target"
    productFlavors {
        phone {
            dimension "target"
        }
    }

    buildTypes {
        debug {
            testCoverageEnabled true
            debuggable true
        }

        release {
            minifyEnabled false
            proguardFiles getDefaultProguardFile('proguard-android.txt'), 'proguard-rules.pro'
        }
    }

    testOptions {
        unitTests.returnDefaultValues = true
        unitTests.includeAndroidResources = true
    }

    compileOptions {
        sourceCompatibility rootProject.ext.sourceCompatibility
        targetCompatibility rootProject.ext.targetCompatibility
    }

}


afterEvaluate {
    tasks.withType(Javadoc) {
        source = android.sourceSets.main.java.srcDirs
        classpath += project.files(android.getBootClasspath().join(File.pathSeparator))
        classpath += files(android.libraryVariants.collect { variant ->
            variant.javaCompileProvider.get().classpath.files
        })
        options {
            source = "8"
            links "https://developer.android.com/reference"
        }
    }
}

task javadocInternal(type: Javadoc) {
    destinationDir = reporting.file("javadocInternal")
    options.memberLevel = JavadocMemberLevel.PRIVATE
}

task javadocPublic(type: Javadoc) {
    destinationDir = reporting.file("javadocPublic")
    options.memberLevel = JavadocMemberLevel.PUBLIC
}

task javadocPublish(type: Jar) {
    from javadocPublic
    archiveClassifier.set('javadoc')
}

def isJitPackBuild() {
    return hasProperty('jitpack')
}

def groupIdForPublish = isJitPackBuild()? 'com.github.adobe.aepsdk-assurance-android': 'com.adobe.marketing.mobile'

def isReleaseBuild() {
    return hasProperty('release')
}

version = isReleaseBuild() ? rootProject.moduleVersion : rootProject.moduleVersion+"-SNAPSHOT"

publish.dependsOn('assemblePhone')
publishToMavenLocal.dependsOn('assemblePhone')
tasks.withType(Javadoc).all { enabled = false }

publishing {
    publications {
        release(MavenPublication) {
            groupId = groupIdForPublish
            artifactId = rootProject.moduleName
            version = version
            artifact("$buildDir/outputs/aar/${rootProject.moduleAARName}")
            artifact javadocPublish

            pom {
                name = mavenRepoName
                description = mavenRepoDescription
                url = 'https://developer.adobe.com/client-sdks'
                licenses {
                    license {
                        name = 'Apache License, Version 2.0'
                    }
                }
                developers {
                    developer {
                        id = 'adobe'
                        name = 'adobe'
                        email = 'adobe-mobile-testing@adobe.com'
                    }
                }
                scm {
                    connection = 'scm:git:github.com//adobe/aepsdk-assurance-android.git'
                    developerConnection = 'scm:git:ssh://github.com//adobe/aepsdk-assurance-android.git'
                    url = 'https://github.com/adobe/aepsdk-assurance-android'
                }
                withXml {
                    def dependenciesNode = asNode().appendNode('dependencies')

                    def coreDependencyNode = dependenciesNode.appendNode('dependency')
                    coreDependencyNode.appendNode('groupId', 'com.adobe.marketing.mobile')
                    coreDependencyNode.appendNode('artifactId', 'core')
                    coreDependencyNode.appendNode('version', mavenCoreVersion)

                    def constraintLayoutDependencyNode = dependenciesNode.appendNode('dependency')
                    constraintLayoutDependencyNode.appendNode('groupId', 'androidx.constraintlayout')
                    constraintLayoutDependencyNode.appendNode('artifactId', 'constraintlayout')
                    constraintLayoutDependencyNode.appendNode('version', "1.1.3")
                }
            }
        }
    }
    repositories {
        maven {
            name = "sonatype"
            url = version.endsWith('SNAPSHOT') ? "https://oss.sonatype.org/content/repositories/snapshots/" : "https://oss.sonatype.org/service/local/staging/deploy/maven2/"
            credentials {
                username = System.getenv("SONATYPE_USERNAME")
                password = System.getenv("SONATYPE_PASSWORD")
            }
        }
    }
}

ext."signing.gnupg.executable"="gpg"
ext."signing.gnupg.keyName"=System.getenv("GPG_KEY_ID")
ext."signing.gnupg.passphrase"=System.getenv("GPG_PASSPHRASE")

signing {
    useGpgCmd()
    required {
        tasks.withType(PublishToMavenRepository).find {
            gradle.taskGraph.hasTask it
        }
    }
    sign publishing.publications
}

task platformUnitTestJacocoReport(type: JacocoReport, dependsOn: "testPhoneDebugUnitTest") {
    def excludeRegex = ['**/BuildConfig.class']
    def debugTree = fileTree(dir: "${project.buildDir}/intermediates/javac/phoneDebug/classes/com/adobe/marketing/mobile", excludes: excludeRegex)

    additionalClassDirs.setFrom files([debugTree])
    additionalSourceDirs.setFrom files(android.sourceSets.main.java.sourceFiles)
    sourceDirectories.setFrom files(android.sourceSets.phone.java.sourceFiles)
    executionData "$buildDir/outputs/unit_test_code_coverage/phoneDebugUnitTest/testPhoneDebugUnitTest.exec"

    reports {
        xml.required = true
        csv.required = false
        html.required = true
    }
}

task platformFunctionalTestJacocoReport(type: JacocoReport, dependsOn: "createPhoneDebugCoverageReport") {
    def excludeRegex = ['**/BuildConfig.class']
    def debugTree = fileTree(dir: "${project.buildDir}/intermediates/javac/phoneDebug/classes/com/adobe/marketing/mobile", excludes: excludeRegex)

    additionalClassDirs.setFrom files([debugTree])
    additionalSourceDirs.setFrom files(android.sourceSets.main.java.sourceFiles)
    sourceDirectories.setFrom files(android.sourceSets.phone.java.sourceFiles)
    executionData fileTree(dir: "$buildDir", includes: [
            "outputs/code_coverage/phoneDebugAndroidTest/connected/*coverage.ec"
    ])

    reports {
        xml.required = true
        csv.required = false
        html.required = true
    }
}
dependencies {
    implementation 'androidx.appcompat:appcompat:1.0.0'
    implementation 'androidx.constraintlayout:constraintlayout:1.1.3'
    implementation "com.adobe.marketing.mobile:core:${rootProject.mavenCoreVersion}"

    testImplementation 'junit:junit:4.13'
    testImplementation 'com.google.code.gson:gson:2.8.5'
    testImplementation "org.mockito:mockito-core:4.5.1"
    testImplementation 'org.mockito:mockito-inline:4.5.1'
    testImplementation 'net.sf.kxml:kxml2:2.3.0@jar'
    testImplementation 'org.json:json:20171018'
    testImplementation 'org.robolectric:robolectric:4.2'

    androidTestImplementation "androidx.test:core:1.4.0"
    androidTestImplementation 'androidx.test.ext:junit:1.1.1'
    androidTestImplementation 'androidx.test.espresso:espresso-core:3.1.0'
}